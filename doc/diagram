Start :

-.->[ Input ]-.->( ; )-,,->
 |            |        ||
 |            `---->---'|
 |                      |
 `----------->----------'


Input :

-,->[ TopLevelCommand ]-.->
 |                      |
 `--------( ; )<--------'


TopLevelCommand :

-.->( print )-->( ( )-->[ STRING ]-->( ) )-,->
 |                                         |
 `--------->( load )-->[ STRING ]----------'
 |                                         |
 `--------->( save )-->[ STRING ]----------'
 |                                         |
 `------->( undef )-,->[ FunName ]-.-------'
 |                  |              |       |
 |                  `----( , )<----'       |
 |                                         |
 `------->( let )-->[ Definitions ]--------'
 |                                         |
 `------>( letrec )-->[ Definitions ]------'
 |                                         |
 `----->[ L_Expr ]-.->[ WhereClause ]-,----'
                   |                  |
                   `--------->--------'


Definitions :

-,->[ Definition ]-.->
 |                 |
 `-----( , )<------'


Definition :

-->[ FunName ]-.->[ Args ]-,->( = )-->[ L_Expr ]-.->[ WhereClause ]-,->
               |           |                     |                  |
               `----->-----'                     `--------->--------'


Args :

-.--------->[ DistinctVars ]---------,->
 |                                   |
 `->( ( )-->[ DistinctVars ]-->( ) )-'


WhereClause :

-->( WHERE )-->[ Definitions ]-->( END )-->


L_Expr :

-.--->[ L_Expr0 ]---,->
 |                  |
 `->[ Composition ]-'


L_Expr0 :

-.-->[ L_Expr1 ]--,->
 |                |
 `->[ InfixTerm ]-'


L_Expr1 :

-.--->[ L_Expr2 ]---,->
 |                  |
 `->[ Abstraction ]-'


L_Expr2 :

-.--->[ L_Expr3 ]---,->
 |                  |
 `->[ Application ]-'


L_Expr3 :

-.---------------------->[ Atom ]----------------------,->
 |                                                     |
 `-->( let )-->[ Definitions ]-->( in )-->[ L_Expr ]---'
 |                                                     |
 `->( letrec )-->[ Definitions ]-->( in )-->[ L_Expr ]-'


Composition :

-->[ L_Expr0 ]-->( . )-->[ L_Expr ]-->


InfixTerm :

-->[ L_Expr0 ]-->[ InfixOp ]-.->[ L_Expr1 ]-,->
                             |              |
                             `------->------'


InfixOp :

-.----->( $ )-->[ FunName ]-----,->
 |                              |
 `->( ` )-->[ FunName ]-->( ` )-'


Abstraction :

-->( L )-->[ DistinctVars ]-->( . )-->[ L_Expr1 ]-->


DistinctVars :

-,->[ Variable ]-.->
 |               |
 `-[ OptComma ]<-'


OptComma :

-.->( , )-,->
 |        |
 `---->---'


Application :

-.->[ L_Expr2 ]-->[ Abstraction ]-,->
 |                                |
 `--->[ L_Expr2 ]-->[ L_Expr3 ]---'


Atom :

-.-------->[ Variable ]--------,->
 |                             |
 `-------->[ FunName ]---------'
 |                             |
 `->( ( )-->[ L_Expr ]-->( ) )-'
 |                             |
 `----->[ ListAggregate ]------'
 |                             |
 `--->[ ListComprehension ]----'
 |                             |
 `-------->[ Constant ]--------'


FunName :

-.-------->[ IDENTIFIER ]---------,->
 |                                |
 `->[ BuiltInFunctionDesignator ]-'


Variable :

-->[ IDENTIFIER ]-->


Constant :

-.->[ INTEGER ]--,->
 |               |
 `-->[ FLOAT ]---'
 |               |
 `--->[ CHAR ]---'
 |               |
 `-->[ STRING ]--'
 |               |
 `--->( Nil )----'
 |               |
 `-->( False )---'
 |               |
 `--->( True )---'
 |               |
 `->( Stddefs )--'
 |               |
 `->( Builtins )-'
 |               |
 `--->( Argv )---'


ListAggregate :

-.------->( [ )-..->[ L_Expr ]-,->( : )-,->( ] )--------,->
 |              ||             |        |               |
 |              |`------>------'        |               |
 |              |                       |               |
 |              `----------->-----------'               |
 |                                                      |
 `->( [ )-,->[ L_Expr ]-..->( : )-->[ L_Expr ]-,->( ] )-'
 |        |             ||                     |        |
 |        `---( , )<----'`---------->----------'        |
 |                                                      |
 `--->( [ )-.->[ L_Expr ]-->( , )-,.                 ,--'
            |                     ||                 |
            `---------->----------'|                 |
     ,-----------------------------'                 |
     `->[ L_Expr ]-->( .. )-.->[ L_Expr ]-,->( ] )---'
                            |             |
                            `------>------'


ListComprehension :

-->( [ )-->[ L_Expr ]-->( | )-.,->[ Qualifier ]-.,->( ] )-->
                              ||                ||
                              |`-----( ; )<-----'|
                              |                  |
                              `--------->--------'


Qualifier :

-.->[ Generator ]-,->
 |                |
 `-->[ Filter ]---'


Generator :

-->[ DistinctVars ]-->( <- )-->[ L_Expr ]-->


Filter :

-->[ L_Expr ]-->


BuiltInFunctionDesignator :

-.---->[ BooleanOps ]-----,->
 |                        |
 `--->[ ArithmeticOps ]---'
 |                        |
 `->[ MoreArithmeticOps ]-'
 |                        |
 `------>[ ListOps ]------'
 |                        |
 `-->[ InputOutputOps ]---'
 |                        |
 `------>[ MiscOps ]------'


BooleanOps :

-.->( ! )--,->
 |         |
 `->( && )-'
 |         |
 `->( || )-'
 |         |
 `->( -> )-'
 |         |
 `->( if )-'


ArithmeticOps :

-.->( ^ )--,->
 |         |
 `->( * )--'
 |         |
 `->( / )--'
 |         |
 `->( % )--'
 |         |
 `->( + )--'
 |         |
 `->( - )--'
 |         |
 `->( = )--'
 |         |
 `->( != )-'
 |         |
 `->( < )--'
 |         |
 `->( <= )-'
 |         |
 `->( > )--'
 |         |
 `->( >= )-'
 |         |
 `->( << )-'
 |         |
 `->( >> )-'


MoreArithmeticOps :

-.-->( sin )--,->
 |            |
 `-->( cos )--'
 |            |
 `-->( tan )--'
 |            |
 `->( asin )--'
 |            |
 `->( acos )--'
 |            |
 `->( atan )--'
 |            |
 `->( sinh )--'
 |            |
 `->( cosh )--'
 |            |
 `->( tanh )--'
 |            |
 `->( asinh )-'
 |            |
 `->( acosh )-'
 |            |
 `->( atanh )-'
 |            |
 `-->( exp )--'
 |            |
 `-->( log )--'
 |            |
 `->( log10 )-'
 |            |
 `->( log2 )--'
 |            |
 `->( sqrt )--'
 |            |
 `->( ceil )--'
 |            |
 `-->( abs )--'
 |            |
 `->( floor )-'


ListOps :

-.->( Cons )-,->
 |           |
 `->( car )--'
 |           |
 `->( cdr )--'
 |           |
 `->( null )-'
 |           |
 `->( len )--'
 |           |
 `->( ith )--'
 |           |
 `-->( ++ )--'


InputOutputOps :

-.-->( read )--,->
 |             |
 `->( write )--'
 |             |
 `->( shows )--'
 |             |
 `->( stdout )-'
 |             |
 `->( stderr )-'
 |             |
 `->( stdin )--'


MiscOps :

-.-->( seq )--,->
 |            |
 `->( force )-'
 |            |
 `->( time )--'
 |            |
 `->( error )-'
